# ############################################################################
# Model: E2E ASR with attention-based ASR
# Training data: FINNISH PARLIAMENT (First release) 30min/spk subset
# Encoder: CRDNN
# Decoder: GRU + beamsearch + RNNLM
# Authors: Aku Rouhe 2021 
# ############################################################################

# Seed needs to be set at top of yaml, before objects with parameters are instantiated
seed: 2602
__set_seed: !apply:torch.manual_seed [!ref <seed>]
loo_cv_index: !PLACEHOLDER

trainshards: !ref ./shards/loo-cv/<loo_cv_index>/attention-train/shard-000000.tar
validshards: ./shards/loo-cv/attention-valid/shard-000000.tar
testshards: !ref ./shards/loo-cv/<loo_cv_index>/attention-test/shard-000000.tar
validsamples: 287
# data_folder_rirs: ./augmentation_data # noise/ris dataset will automatically be downloaded here
data_folder_rirs: ./tmp/sb-rir-data
num_units: 400
output_folder: !ref exp/loo-cv/<loo_cv_index>/attention/w2v2-A-<seed>-<num_units>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt
tokenizer_path: !ref exp/loo-cv/<loo_cv_index>/lm/varikn.bpe<num_units>.d0.01/bpe.<num_units>.model

tokenizer: !new:sentencepiece.SentencePieceProcessor
    model_file: !ref <tokenizer_path>

w2v2_savepath: ./w2v2_checkpoints
# URL for Uralic facebook model 
wav2vec2_hub: facebook/wav2vec2-large-uralic-voxpopuli-v2 

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

# Feature parameters
sample_rate: 16000
subsampling: 4

# Training parameters
number_of_epochs: 50
number_of_ctc_epochs: 15
dynamic_batch_kwargs:
    len_key: "wav"
    sampler_kwargs:
        target_batch_numel: !ref <sample_rate> * 50
        max_batch_numel: !ref <sample_rate> * 60
    max_sample_len: !ref <sample_rate> * 25
train_loader_kwargs:
    num_workers: 1
    looped_nominal_epoch: 1000
validbatchsize: 4
validbatches: !apply:math.ceil 
    - !ref <validsamples> / <validbatchsize>
ctc_weight: 0.5
ckpt_interval_minutes: -1 # save checkpoint every N min
label_smoothing: 0.1
lr: 0.0001
lr_wav2vec: 0.0001

grad_accumulation_factor: 1


# Model parameters
activation: !name:torch.nn.LeakyReLU
wav2vec_output_dim: 1024
dnn_neurons: 1024
freeze_wav2vec: False
dropout: 0.15

emb_size: 128
dec_neurons: 512
dec_layers: 1
output_neurons: !ref <num_units>  #Number of tokens (same as LM)

# Outputs
pad_index: 0
blank_index: 0
unk_index: 0
bos_index: 1 
eos_index: 2

# Decoding parameters
test_data_id: "valid"
min_decode_ratio: 0.0
max_decode_ratio: 1.0
valid_beam_size: 4
test_beam_size: 4
eos_threshold: 1.3
using_max_attn_shift: False
max_attn_shift: 240
ctc_weight_decode: 0.0
coverage_penalty: 3.0 
temperature: 2.0
wer_file: !ref <output_folder>/wer_<test_data_id>_beam<test_beam_size>_cov<coverage_penalty>_eos<eos_threshold>_temp<temperature>_noattnshift.txt
decode_text_file: !ref <output_folder>/text_<test_data_id>_beam<test_beam_size>_cov<coverage_penalty>_eos<eos_threshold>_temp<temperature>_noattnshift.txt

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>


env_corrupt: !new:speechbrain.lobes.augment.EnvCorrupt
   openrir_folder: !ref <data_folder_rirs>
   babble_prob: 0.25
   reverb_prob: 0.25
   noise_prob: 0.5
   noise_snr_low: 0
   noise_snr_high: 15

wav2vec2: !new:speechbrain.lobes.models.huggingface_wav2vec.HuggingFaceWav2Vec2
    source: !ref <wav2vec2_hub>
    output_norm: True
    freeze: !ref <freeze_wav2vec>
    freeze_feature_extractor: True
    save_path: !ref <w2v2_savepath>

enc: !new:speechbrain.nnet.containers.Sequential
    input_shape: [null, null, !ref <wav2vec_output_dim>]
    linear1: !name:speechbrain.nnet.linear.Linear
        n_neurons: !ref <dnn_neurons>
        bias: True
    bn1: !name:speechbrain.nnet.normalization.BatchNorm1d
    activation: !new:torch.nn.LeakyReLU
    drop: !new:torch.nn.Dropout
        p: !ref <dropout>
    linear2: !name:speechbrain.nnet.linear.Linear
        n_neurons: !ref <dnn_neurons>
        bias: True
    bn2: !name:speechbrain.nnet.normalization.BatchNorm1d
    activation2: !new:torch.nn.LeakyReLU

# Embedding (from indexes to an embedding space of dimension emb_size).
embedding: !new:speechbrain.nnet.embedding.Embedding
    num_embeddings: !ref <output_neurons>
    embedding_dim: !ref <emb_size>

# Attention-based RNN decoder.
decoder: !new:speechbrain.nnet.RNN.AttentionalRNNDecoder
    enc_dim: !ref <dnn_neurons>
    input_size: !ref <emb_size>
    rnn_type: gru
    attn_type: location
    hidden_size: !ref <dec_neurons>
    attn_dim: 1024
    num_layers: !ref <dec_layers>
    scaling: 1.0
    channels: 10
    kernel_size: 100
    re_init: True
    dropout: !ref <dropout>

# Linear transformation on the top of the encoder.
ctc_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <dnn_neurons>
    n_neurons: !ref <output_neurons>

# Linear transformation on the top of the decoder.
seq_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <dec_neurons>
    n_neurons: !ref <output_neurons>

# Final softmax (for log posteriors computation).
log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

# Cost definition for the CTC part.
ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
    blank_index: !ref <blank_index>

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class
modules:
    wav2vec2: !ref <wav2vec2>
    encoder: !ref <enc>
    embedding: !ref <embedding>
    decoder: !ref <decoder>
    ctc_lin: !ref <ctc_lin>
    seq_lin: !ref <seq_lin>
    env_corrupt: !ref <env_corrupt>

# Gathering all the submodels in a single model object.
model: !new:torch.nn.ModuleList
    - - !ref <enc>
      - !ref <embedding>
      - !ref <decoder>
      - !ref <ctc_lin>
      - !ref <seq_lin>

# Beamsearch is applied on the top of the decoder. If the language model is
# given, a language model is applied (with a weight specified in lm_weight).
# If ctc_weight is set, the decoder uses CTC + attention beamsearch. This
# improves the performance, but slows down decoding. For a description of
# the other parameters, please see the speechbrain.decoders.S2SRNNBeamSearchLM.

# It makes sense to have a lighter search during validation. In this case,
# we don't use the LM and CTC probabilities during decoding.
greedy_search: !new:speechbrain.decoders.S2SRNNGreedySearcher
    embedding: !ref <embedding>
    decoder: !ref <decoder>
    linear: !ref <seq_lin>
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    
    
valid_search: !new:speechbrain.decoders.S2SRNNBeamSearcher
    embedding: !ref <embedding>
    decoder: !ref <decoder>
    linear: !ref <seq_lin>
    ctc_linear: !ref <ctc_lin>
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <valid_beam_size>
    eos_threshold: !ref <eos_threshold>
    using_max_attn_shift: !ref <using_max_attn_shift>
    max_attn_shift: !ref <max_attn_shift>
    coverage_penalty: !ref <coverage_penalty>
    temperature: !ref <temperature>

# The final decoding on the test set can be more computationally demanding.
# In this case, we use the LM + CTC probabilities during decoding as well.
# Please, remove this part if you need a faster decoder.
test_search: !new:speechbrain.decoders.S2SRNNBeamSearcher
    embedding: !ref <embedding>
    decoder: !ref <decoder>
    linear: !ref <seq_lin>
    ctc_linear: !ref <ctc_lin>
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <test_beam_size>
    eos_threshold: !ref <eos_threshold>
    using_max_attn_shift: !ref <using_max_attn_shift>
    max_attn_shift: !ref <max_attn_shift>
    coverage_penalty: !ref <coverage_penalty>
    ctc_weight: !ref <ctc_weight_decode>
    temperature: !ref <temperature>

lr_annealing_model: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr>
    improvement_threshold: 0.0025
    annealing_factor: 0.8
    patient: 0

lr_annealing_wav2vec: !new:speechbrain.nnet.schedulers.NewBobScheduler
    initial_value: !ref <lr_wav2vec>
    improvement_threshold: 0.0025
    annealing_factor: 0.9
    patient: 0


model_opt_class: !name:torch.optim.Adam
      lr: !ref <lr> 

wav2vec_opt_class: !name:torch.optim.Adam
    lr: !ref <lr_wav2vec>


# Functions that compute the statistics to track during the validation step.
error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats

cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
    split_tokens: True

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        wav2vec2: !ref <wav2vec2>
        model: !ref <model>
        counter: !ref <epoch_counter>
